import asyncio
from playwright import async_api

async def run_test():
    pw = None
    browser = None
    context = None
    
    try:
        # Start a Playwright session in asynchronous mode
        pw = await async_api.async_playwright().start()
        
        # Launch a Chromium browser in headless mode with custom arguments
        browser = await pw.chromium.launch(
            headless=True,
            args=[
                "--window-size=1280,720",         # Set the browser window size
                "--disable-dev-shm-usage",        # Avoid using /dev/shm which can cause issues in containers
                "--ipc=host",                     # Use host-level IPC for better stability
                "--single-process"                # Run the browser in a single process mode
            ],
        )
        
        # Create a new browser context (like an incognito window)
        context = await browser.new_context()
        context.set_default_timeout(5000)
        
        # Open a new page in the browser context
        page = await context.new_page()
        
        # Navigate to your target URL and wait until the network request is committed
        await page.goto("http://localhost:3000", wait_until="commit", timeout=10000)
        
        # Wait for the main page to reach DOMContentLoaded state (optional for stability)
        try:
            await page.wait_for_load_state("domcontentloaded", timeout=3000)
        except async_api.Error:
            pass
        
        # Iterate through all iframes and wait for them to load as well
        for frame in page.frames:
            try:
                await frame.wait_for_load_state("domcontentloaded", timeout=3000)
            except async_api.Error:
                pass
        
        # Navigate to sign in page
        await page.goto("http://localhost:3000/auth/signin", wait_until="networkidle")
        
        # Fill in email field with test user credentials
        await page.fill('input[name="email"]', 'user@example.com')
        await page.wait_for_timeout(500)
        
        # Fill in password field with test user credentials  
        await page.fill('input[name="password"]', 'user123')
        await page.wait_for_timeout(500)

        # Click the 'Sign in' button to authenticate and navigate to User Dashboard.
        await page.click('button[type="submit"]')
        
        # Wait for navigation to dashboard and page to load completely
        await page.wait_for_url('**/dashboard', timeout=15000)
        await page.wait_for_load_state("networkidle", timeout=10000)
        
        # Wait for the API keys section to load (looking for the "New Key" button)
        new_key_button = page.locator('button:has-text("New Key")')
        await new_key_button.wait_for(state="visible", timeout=15000)

        # Get the initial count of API keys
        initial_key_count = await page.locator('.border').count()
        print(f"Initial API key count: {initial_key_count}")

        # Click the 'New Key' button to generate a new API key.
        await new_key_button.click(timeout=5000)
        
        # Wait for the new API key to appear and the page to update
        await page.wait_for_timeout(3000)
        
        # Verify that a new API key was generated by checking the count increased
        new_key_count = await page.locator('.border').count()
        print(f"New API key count: {new_key_count}")
        
        # The test user starts with 2 API keys, so after generating a new one, there should be 3
        assert new_key_count > initial_key_count, f'Expected more API keys after generation. Initial: {initial_key_count}, Current: {new_key_count}'
        
        # Test copying functionality - click the copy button on the first API key
        copy_button = page.locator('button').filter(has=page.locator('svg')).first
        await copy_button.wait_for(state="visible", timeout=5000)
        await copy_button.click(timeout=5000)
        
        # Wait for the "Copied to clipboard!" message to appear
        copied_message = page.locator('text=Copied to clipboard!')
        await copied_message.wait_for(state="visible", timeout=5000)
        
        print("âœ… Test passed: API key generation and copy functionality works correctly")
        await asyncio.sleep(5)
    
    finally:
        if context:
            await context.close()
        if browser:
            await browser.close()
        if pw:
            await pw.stop()
            
asyncio.run(run_test())
    